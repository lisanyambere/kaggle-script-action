name: Kaggle Script Action
description: Run Python scripts on Kaggle kernels with configurable GPU/TPU/internet options.
author: Kevin Kibe

inputs:
  username:
    description: Your Kaggle username
    required: true
  key:
    description: Your Kaggle API key
    required: true
  title:
    description: Title for the Kaggle kernel
    required: true
  custom_script:
    description: Python command(s) to run inside the kernel
    required: false
    default: |
      print("Hello, world from default script!")
  enable_gpu:
    description: Enable GPU for the kernel (true/false)
    required: false
    default: "true"
  enable_tpu:
    description: Enable TPU for the kernel (true/false)
    required: false
    default: "false"
  enable_internet:
    description: Enable internet access for the kernel (true/false)
    required: false
    default: "true"
  working_subdir:
    description: Subdirectory containing your script (currently unused in this version)
    required: false
    default: ""
  dataset_sources:
    description: Comma-separated list of dataset sources (e.g., username/dataset-slug)
    required: false
    default: ""
  competition_sources:
    description: Comma-separated list of competition sources
    required: false
    default: ""
  kernel_sources:
    description: Comma-separated list of kernel sources
    required: false
    default: ""
  sleep_time:
    description: Time in seconds to wait between kernel status checks
    required: false
    default: "10"

runs:
  using: "composite"
  steps:
    - name: Install dependencies for the action runner
      shell: bash
      run: |
        pip install kaggle jq

    - name: Set up Kaggle API token
      shell: bash
      run: |
        mkdir -p ~/.kaggle
        echo "{\"username\":\"${{ inputs.username }}\",\"key\":\"${{ inputs.key }}\"}" > ~/.kaggle/kaggle.json
        chmod 600 ~/.kaggle/kaggle.json

    - name: Generate notebook
      shell: bash
      run: |
        NOTEBOOK_FILE=script.ipynb
        python -c '
        import json
        import os
        
        script = """${{ inputs.custom_script }}"""
        notebook = {
            "cells": [
                {
                    "cell_type": "code",
                    "execution_count": None,
                    "metadata": {},
                    "outputs": [],
                    "source": script.splitlines(True)
                }
            ],
            "metadata": {
                "kernelspec": {
                    "display_name": "Python 3",
                    "language": "python",
                    "name": "python3"
                }
            },
            "nbformat": 4,
            "nbformat_minor": 2
        }
        
        with open("script.ipynb", "w") as f:
            json.dump(notebook, f, indent=2)
        '

    - name: Create kernel metadata
      shell: bash
      run: |
        KERNEL_ID="${{ inputs.username }}/$(echo "${{ inputs.title }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--/-/g')"
        
        python -c '
        import json
        import os
        import sys
        
        # Get input values from environment variables
        username = os.environ.get("INPUT_USERNAME", "")
        title = os.environ.get("INPUT_TITLE", "")
        enable_gpu = os.environ.get("INPUT_ENABLE_GPU", "true").lower() == "true"
        enable_tpu = os.environ.get("INPUT_ENABLE_TPU", "false").lower() == "true"
        enable_internet = os.environ.get("INPUT_ENABLE_INTERNET", "true").lower() == "true"
        dataset_sources = os.environ.get("INPUT_DATASET_SOURCES", "").split(",") if os.environ.get("INPUT_DATASET_SOURCES", "") else []
        competition_sources = os.environ.get("INPUT_COMPETITION_SOURCES", "").split(",") if os.environ.get("INPUT_COMPETITION_SOURCES", "") else []
        kernel_sources = os.environ.get("INPUT_KERNEL_SOURCES", "").split(",") if os.environ.get("INPUT_KERNEL_SOURCES", "") else []
        
        # Clean up empty entries
        dataset_sources = [s.strip() for s in dataset_sources if s.strip()]
        competition_sources = [s.strip() for s in competition_sources if s.strip()]
        kernel_sources = [s.strip() for s in kernel_sources if s.strip()]
        
        # Generate kernel ID
        import re
        kernel_id = f"{username}/{re.sub(r"--", "-", re.sub(r"[^a-z0-9-]", "-", title.lower()))}"
        
        metadata = {
            "id": kernel_id,
            "title": title,
            "code_file": "script.ipynb",
            "language": "python",
            "kernel_type": "notebook",
            "is_private": False,
            "enable_gpu": enable_gpu,
            "enable_tpu": enable_tpu,
            "enable_internet": enable_internet,
            "dataset_sources": dataset_sources,
            "competition_sources": competition_sources,
            "kernel_sources": kernel_sources
        }
        
        with open("kernel-metadata.json", "w") as f:
            json.dump(metadata, f, indent=2)
        
        print(f"Generated kernel-metadata.json for kernel ID: {kernel_id}")
        '
        
        # Output the metadata file for debugging
        echo "Generated kernel-metadata.json:"
        cat kernel-metadata.json

    - name: Push to Kaggle
      shell: bash
      run: |
        kaggle kernels push -p .

    - name: Wait for execution
      shell: bash
      run: |
        KERNEL_ID="${{ inputs.username }}/$(echo "${{ inputs.title }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--/-/g')"
        echo "⌛ Waiting for kernel ($KERNEL_ID) to execute..."
        sleep_duration=${{ inputs.sleep_time }}
        sleep "$sleep_duration"

        max_attempts=30
        attempt_num=0

        while true; do
          ((attempt_num++))
          if ((attempt_num > max_attempts)); then
            echo "❌ Maximum attempts reached. Kernel status check timed out."
            kaggle kernels output "$KERNEL_ID" || echo "Failed to get kernel output on timeout."
            exit 1
          fi

          status_output=$(kaggle kernels status "$KERNEL_ID" 2>&1)
          echo "Attempt $attempt_num: Status: $status_output"

          if echo "$status_output" | grep -q "complete"; then
            echo "✅ Execution complete for $KERNEL_ID"
            kaggle kernels output "$KERNEL_ID"
            break
          elif echo "$status_output" | grep -qE "error|failed|cancelled|cancelRequested"; then
            echo "❌ Kernel $KERNEL_ID failed or was cancelled. Status: $status_output"
            kaggle kernels output "$KERNEL_ID" || echo "Failed to get kernel output on failure."
            exit 1
          elif echo "$status_output" | grep -q "has no run"; then
            echo "⏳ Kernel $KERNEL_ID has no run yet. Waiting..."
          elif echo "$status_output" | grep -q "not found"; then
            echo "❌ Kernel $KERNEL_ID not found. Check title and username."
            exit 1
          fi

          echo "⏳ Still processing, checking again in $sleep_duration seconds..."
          sleep "$sleep_duration"
        done